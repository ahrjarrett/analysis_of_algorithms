#+TITLE: Union Find Notes
#+OPTIONS: toc:nil
#+AUTHOR: ahrjarrett

** [[https://github.com/ahrjarrett/analysis_of_algorithms/blob/master/part_i/lectures/15UnionFind.pdf][1.5: Union Find Lecture Slides]]
   
   | lecture # | link/title               |
   |-----------+--------------------------|
   | video 1   | [[https://www.coursera.org/learn/algorithms-part1/lecture/fjxHC/dynamic-connectivity][Dynamic Connectivity]]     |
   | video 2   | [[https://www.coursera.org/learn/algorithms-part1/lecture/EcF3P/quick-find][Quick Find]]               |
   | video 3   | [[https://www.coursera.org/learn/algorithms-part1/lecture/ZgecU/quick-union][Quick Union]]              |
   | video 4   | [[https://www.coursera.org/learn/algorithms-part1/lecture/RZW72/quick-union-improvements][Quick Union Improvements]] |
   | video 5   | [[https://www.coursera.org/learn/algorithms-part1/lecture/OLXM8/union-find-applications][Union Find Applications]]  |


** Dynamic connectivity

   Pomodoro log:
   :LOGBOOK:
   CLOCK: [2017-11-29 Wed 03:17]--[2017-11-29 Wed 03:42] =>  0:25
   :END:

   Notes from Video 1:

   We will be taking a *scientific approach*  

*** Given a set of N objects:

    1. Union command: Connect two objects
    2. Find/connected query: is there a path connecting the two objects?
    
#+BEGIN_SRC java
    // slide 4:
    union(4, 3)
    union(3, 8)
    union(6, 5)
    union(9, 4)
    union(2, 1)
    connected(0, 7) // false
    connected(8, 9) // true
    union(5, 0)
    union(7, 2)
    union(1, 0)
    connected(0, 7) // true
#+END_SRC

Question: Is there a path connecting =p= and =q=?

The algorithm we’re looking at will not return the actual path, but whether there /is/ a path

*** Modeling the objects:

*Applications involve manipulating objects of all types:*

- Pixels in a digital photo
- Computers in a network
- Friends in a social network
- Transistors in a computer chip
- Elements in a mathematical set
- Variable names in Fortran program
- Metallic sites in a composite system
 
*** Modeling the connections

We assume “is connected to” is an [[https://en.wikipedia.org/wiki/Equivalence_relation][Equivalence Relation]]

- *Reflexive:* =p= is connected to =p=
- *Symmetric:* if =p= is connected to =q=, then =q= is connected to =p=
- *Transitive:* if =p= is connected to =q= and =q= is connected to =r=, then =p= is connected to =r=


